{"version":3,"sources":["web3.js","lottery.js","App.tsx","serviceWorker.ts","index.tsx"],"names":["provider","window","ethereum","enable","web3","Web3","eth","Contract","App","props","onSubmit","event","a","preventDefault","setState","message","getAccounts","accounts","lottery","methods","enter","send","from","value","utils","toWei","state","onClick","pickWinner","manager","players","balance","call","getPlayers","getBalance","options","address","this","length","fromWei","onChange","target","Component","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.26f1279f.chunk.js","sourcesContent":["// import Web3 from \"web3\";\n// const HDWalletProvider = require('truffle-hdwallet-provider');\n// const provider = new HDWalletProvider(\n//   'rude vocal door adapt mesh layer artefact toss idea pony mountain empty',\n//   'https://rinkeby.infura.io/v3/df1048662a034cc5ac03dbddd74de3c1'\n// );\n// const web3 = new Web3(provider);\n\n\n// export default web3;\nimport Web3 from \"web3\";\n\nconst provider = window.ethereum;\nprovider.enable();\nconst web3 = new Web3(provider);\n\nexport default web3;","\nimport web3 from './web3';\nconst address = '0x8e80f7Bc61eEBbeB4155d53Af2797ccE1a91d211';\nconst abi = [{ \"constant\": true, \"inputs\": [], \"name\": \"manager\", \"outputs\": [{ \"name\": \"\", \"type\": \"address\" }], \"payable\": false, \"stateMutability\": \"view\", \"type\": \"function\" }, { \"constant\": false, \"inputs\": [], \"name\": \"pickWinner\", \"outputs\": [], \"payable\": false, \"stateMutability\": \"nonpayable\", \"type\": \"function\" }, { \"constant\": true, \"inputs\": [], \"name\": \"random\", \"outputs\": [{ \"name\": \"\", \"type\": \"uint256\" }], \"payable\": false, \"stateMutability\": \"view\", \"type\": \"function\" }, { \"constant\": true, \"inputs\": [], \"name\": \"getPlayers\", \"outputs\": [{ \"name\": \"\", \"type\": \"address[]\" }], \"payable\": false, \"stateMutability\": \"view\", \"type\": \"function\" }, { \"constant\": false, \"inputs\": [], \"name\": \"enter\", \"outputs\": [], \"payable\": true, \"stateMutability\": \"payable\", \"type\": \"function\" }, { \"constant\": true, \"inputs\": [{ \"name\": \"\", \"type\": \"uint256\" }], \"name\": \"players\", \"outputs\": [{ \"name\": \"\", \"type\": \"address\" }], \"payable\": false, \"stateMutability\": \"view\", \"type\": \"function\" }, { \"inputs\": [], \"payable\": false, \"stateMutability\": \"nonpayable\", \"type\": \"constructor\" }];\nexport default new web3.eth.Contract(abi, address);","import React, { Component } from 'react';\nimport web3 from './web3';\nimport lottery from './lottery';\n\ninterface AppProps {\n}\n\ninterface AppState {\n  manager: string,\n  players: string[],\n  balance: string,\n  value: string,\n  message: string\n}\n\nclass App extends Component<AppProps, AppState> {\n\n  constructor(props: AppProps) {\n    super(props);\n    this.state = {\n      manager: '',\n      players: [],\n      balance: '',\n      value: '',\n      message: ''\n    };\n  }\n\n  async componentDidMount() {\n    const manager = await lottery.methods.manager().call();\n    const players = await lottery.methods.getPlayers().call();\n    const balance = await web3.eth.getBalance(lottery.options.address);\n    this.setState({ manager, players, balance });\n\n  }\n\n  onSubmit = async (event: React.FormEvent<HTMLFormElement>): Promise<void> => {\n    event.preventDefault();\n    this.setState({ message: 'Waiting on transaction success...' });\n\n    const accounts: string[] = await web3.eth.getAccounts();\n    await lottery.methods.enter().send({\n      from: accounts[0],\n      value: web3.utils.toWei(this.state.value, 'ether')\n    });\n    this.setState({ message: 'You have been entered!' });\n  }\n\n\n  onClick = async (event: React.MouseEvent): Promise<void> => {\n    event.preventDefault();\n    this.setState({ message: 'Waiting on transaction success...' });\n\n    const accounts: string[] = await web3.eth.getAccounts();\n    await lottery.methods.pickWinner().send({\n      from: accounts[0],\n    });\n    this.setState({ message: 'A winner has been picked!' });\n  }\n  render() {\n    return (\n      <div>\n        <h2>Lottory contract</h2>\n        <p>\n          this contract is managed by{this.state.manager}\n          there are currently {this.state.players.length} are playing\n            and there is {web3.utils.fromWei(this.state.balance, 'ether')} $ in the game\n        </p>\n        <hr />\n\n        <form onSubmit={this.onSubmit}>\n          <h4>Want to try your luck?</h4>\n          <div>\n            <label>Amount of ether to enter</label>\n            <input\n              value={this.state.value}\n              onChange={event => this.setState({ value: event.target.value })}\n            />\n          </div>\n          <button>Enter</button>\n        </form>\n\n\n        <hr />\n        <h4>Ready to pick a winner?</h4>\n        <button onClick={this.onClick}>Pick a winner!</button>\n        <hr />\n        <h1>{this.state.message}</h1>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}